"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _plugin=_interopRequireDefault(require("./plugin")),_buttonview=_interopRequireDefault(require("@ckeditor/ckeditor5-ui/src/button/buttonview")),_browseFiles=_interopRequireDefault(require("./../theme/icons/browse-files.svg"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}/**
 * The CKFinder UI plugin. It introduces he `'ckfinder'` toolbar button.
 *
 * @extends module:core/plugin~Plugin
 */var MyFinderUI=/*#__PURE__*/function(a){function b(){return _classCallCheck(this,b),_possibleConstructorReturn(this,_getPrototypeOf(b).apply(this,arguments))}return _inherits(b,a),_createClass(b,[{key:"init",/**
     * @inheritDoc
     */value:function d(){var a=this.editor,b=a.ui.componentFactory,c=a.t;b.add("myfinder",function(b){var d=a.commands.get("myfinder"),e=new _buttonview.default(b);return e.on("execute",function(){a.execute("myfinder"),a.editing.view.focus()}),e.set({label:c("Insert image or file"),icon:_browseFiles.default,tooltip:!0}),e.bind("isEnabled").to(d),e})}}],[{key:"pluginName",/**
     * @inheritDoc
     */get:function a(){return"MyFinderUI"}}]),b}(_plugin.default);exports.default=MyFinderUI;